{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\opeye\\\\Downloads\\\\MusicConnect Site\\\\src\\\\components\\\\SupabaseTest.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabase.ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function SupabaseTest() {\n  _s();\n  const [serverTime, setServerTime] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    async function checkConnection() {\n      try {\n        setLoading(true);\n\n        // Simple query to check connection\n        const {\n          data,\n          error\n        } = await supabase.from('profiles').select('count(*)', {\n          count: 'exact',\n          head: true\n        });\n        if (error) throw new Error(error.message);\n\n        // Get server time to confirm connection\n        const {\n          data: timeData,\n          error: timeError\n        } = await supabase.rpc('now');\n        if (timeError) throw new Error(timeError.message);\n        setServerTime(new Date(timeData).toLocaleString());\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Unknown error');\n      } finally {\n        setLoading(false);\n      }\n    }\n    checkConnection();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      maxWidth: '500px',\n      margin: '0 auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Supabase Connection Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Testing connection...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '10px',\n        background: '#ffebee',\n        borderRadius: '4px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Connection Error:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Check your environment variables and Supabase project settings.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), serverTime && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '10px',\n        background: '#e8f5e9',\n        borderRadius: '4px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Connection Successful!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Supabase server time: \", serverTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(SupabaseTest, \"fQBlBs6sEXRQWUlRHpe6MMX8SNs=\");\n_c = SupabaseTest;\nvar _c;\n$RefreshReg$(_c, \"SupabaseTest\");","map":{"version":3,"names":["useState","useEffect","supabase","jsxDEV","_jsxDEV","SupabaseTest","_s","serverTime","setServerTime","loading","setLoading","error","setError","checkConnection","data","from","select","count","head","Error","message","timeData","timeError","rpc","Date","toLocaleString","err","style","padding","maxWidth","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","background","borderRadius","_c","$RefreshReg$"],"sources":["C:/Users/opeye/Downloads/MusicConnect Site/src/components/SupabaseTest.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { supabase } from '../lib/supabase.ts';\r\n\r\nexport function SupabaseTest() {\r\n  const [serverTime, setServerTime] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    async function checkConnection() {\r\n      try {\r\n        setLoading(true);\r\n        \r\n        // Simple query to check connection\r\n        const { data, error } = await supabase\r\n          .from('profiles')\r\n          .select('count(*)', { count: 'exact', head: true });\r\n          \r\n        if (error) throw new Error(error.message);\r\n        \r\n        // Get server time to confirm connection\r\n        const { data: timeData, error: timeError } = await supabase\r\n          .rpc('now');\r\n          \r\n        if (timeError) throw new Error(timeError.message);\r\n        \r\n        setServerTime(new Date(timeData).toLocaleString());\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : 'Unknown error');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n    \r\n    checkConnection();\r\n  }, []);\r\n  \r\n  return (\r\n    <div style={{ padding: '20px', maxWidth: '500px', margin: '0 auto' }}>\r\n      <h2>Supabase Connection Test</h2>\r\n      \r\n      {loading && <p>Testing connection...</p>}\r\n      \r\n      {error && (\r\n        <div style={{ padding: '10px', background: '#ffebee', borderRadius: '4px' }}>\r\n          <h3>Connection Error:</h3>\r\n          <p>{error}</p>\r\n          <p>Check your environment variables and Supabase project settings.</p>\r\n        </div>\r\n      )}\r\n      \r\n      {serverTime && (\r\n        <div style={{ padding: '10px', background: '#e8f5e9', borderRadius: '4px' }}>\r\n          <h3>Connection Successful!</h3>\r\n          <p>Supabase server time: {serverTime}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}